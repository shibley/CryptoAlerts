

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "App.config"
//     Connection String Name: "CryptoAlertsContext"
//     Connection String:      "Data Source=WIN7VM;Initial Catalog=CryptoAlerts;Integrated Security=True;Connect Timeout=15;Encrypt=False;TrustServerCertificate=True;ApplicationIntent=ReadWrite;MultiSubnetFailover=False"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CryptoAlerts
{
    using System.Linq;

    #region Unit of work

    public interface ICryptoAlertsContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Alert> Alerts { get; set; } // Alerts
        System.Data.Entity.DbSet<AlertSetting> AlertSettings { get; set; } // AlertSettings
        System.Data.Entity.DbSet<CurrencyPair> CurrencyPairs { get; set; } // CurrencyPairs
        System.Data.Entity.DbSet<Exception> Exceptions { get; set; } // Exceptions
        System.Data.Entity.DbSet<Exchanx> Exchanges { get; set; } // Exchanges
        System.Data.Entity.DbSet<Language> Languages { get; set; } // Languages
        System.Data.Entity.DbSet<Role> Roles { get; set; } // Roles
        System.Data.Entity.DbSet<RolePermission> RolePermissions { get; set; } // RolePermissions
        System.Data.Entity.DbSet<User> Users { get; set; } // Users
        System.Data.Entity.DbSet<UserPermission> UserPermissions { get; set; } // UserPermissions
        System.Data.Entity.DbSet<UserPreference> UserPreferences { get; set; } // UserPreferences
        System.Data.Entity.DbSet<UserRole> UserRoles { get; set; } // UserRoles
        System.Data.Entity.DbSet<VersionInfo> VersionInfoes { get; set; } // VersionInfo

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class CryptoAlertsContext : System.Data.Entity.DbContext, ICryptoAlertsContext
    {
        public System.Data.Entity.DbSet<Alert> Alerts { get; set; } // Alerts
        public System.Data.Entity.DbSet<AlertSetting> AlertSettings { get; set; } // AlertSettings
        public System.Data.Entity.DbSet<CurrencyPair> CurrencyPairs { get; set; } // CurrencyPairs
        public System.Data.Entity.DbSet<Exception> Exceptions { get; set; } // Exceptions
        public System.Data.Entity.DbSet<Exchanx> Exchanges { get; set; } // Exchanges
        public System.Data.Entity.DbSet<Language> Languages { get; set; } // Languages
        public System.Data.Entity.DbSet<Role> Roles { get; set; } // Roles
        public System.Data.Entity.DbSet<RolePermission> RolePermissions { get; set; } // RolePermissions
        public System.Data.Entity.DbSet<User> Users { get; set; } // Users
        public System.Data.Entity.DbSet<UserPermission> UserPermissions { get; set; } // UserPermissions
        public System.Data.Entity.DbSet<UserPreference> UserPreferences { get; set; } // UserPreferences
        public System.Data.Entity.DbSet<UserRole> UserRoles { get; set; } // UserRoles
        public System.Data.Entity.DbSet<VersionInfo> VersionInfoes { get; set; } // VersionInfo

        static CryptoAlertsContext()
        {
            System.Data.Entity.Database.SetInitializer<CryptoAlertsContext>(null);
        }

        public CryptoAlertsContext()
            : base("Name=CryptoAlertsContext")
        {
        }

        public CryptoAlertsContext(string connectionString)
            : base(connectionString)
        {
        }

        public CryptoAlertsContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public CryptoAlertsContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public CryptoAlertsContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AlertConfiguration());
            modelBuilder.Configurations.Add(new AlertSettingConfiguration());
            modelBuilder.Configurations.Add(new CurrencyPairConfiguration());
            modelBuilder.Configurations.Add(new ExceptionConfiguration());
            modelBuilder.Configurations.Add(new ExchanxConfiguration());
            modelBuilder.Configurations.Add(new LanguageConfiguration());
            modelBuilder.Configurations.Add(new RoleConfiguration());
            modelBuilder.Configurations.Add(new RolePermissionConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserPermissionConfiguration());
            modelBuilder.Configurations.Add(new UserPreferenceConfiguration());
            modelBuilder.Configurations.Add(new UserRoleConfiguration());
            modelBuilder.Configurations.Add(new VersionInfoConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AlertConfiguration(schema));
            modelBuilder.Configurations.Add(new AlertSettingConfiguration(schema));
            modelBuilder.Configurations.Add(new CurrencyPairConfiguration(schema));
            modelBuilder.Configurations.Add(new ExceptionConfiguration(schema));
            modelBuilder.Configurations.Add(new ExchanxConfiguration(schema));
            modelBuilder.Configurations.Add(new LanguageConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new RolePermissionConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserPermissionConfiguration(schema));
            modelBuilder.Configurations.Add(new UserPreferenceConfiguration(schema));
            modelBuilder.Configurations.Add(new UserRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new VersionInfoConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class CryptoAlertsContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<CryptoAlertsContext>
    {
        public CryptoAlertsContext Create()
        {
            return new CryptoAlertsContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeCryptoAlertsContext : ICryptoAlertsContext
    {
        public System.Data.Entity.DbSet<Alert> Alerts { get; set; }
        public System.Data.Entity.DbSet<AlertSetting> AlertSettings { get; set; }
        public System.Data.Entity.DbSet<CurrencyPair> CurrencyPairs { get; set; }
        public System.Data.Entity.DbSet<Exception> Exceptions { get; set; }
        public System.Data.Entity.DbSet<Exchanx> Exchanges { get; set; }
        public System.Data.Entity.DbSet<Language> Languages { get; set; }
        public System.Data.Entity.DbSet<Role> Roles { get; set; }
        public System.Data.Entity.DbSet<RolePermission> RolePermissions { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<UserPermission> UserPermissions { get; set; }
        public System.Data.Entity.DbSet<UserPreference> UserPreferences { get; set; }
        public System.Data.Entity.DbSet<UserRole> UserRoles { get; set; }
        public System.Data.Entity.DbSet<VersionInfo> VersionInfoes { get; set; }

        public FakeCryptoAlertsContext()
        {
            Alerts = new FakeDbSet<Alert>("IAlertId");
            AlertSettings = new FakeDbSet<AlertSetting>("IAlertSettingId");
            CurrencyPairs = new FakeDbSet<CurrencyPair>("ICurrencyPairId");
            Exceptions = new FakeDbSet<Exception>("Id");
            Exchanges = new FakeDbSet<Exchanx>("IExchangeId");
            Languages = new FakeDbSet<Language>("Id");
            Roles = new FakeDbSet<Role>("RoleId");
            RolePermissions = new FakeDbSet<RolePermission>("RolePermissionId");
            Users = new FakeDbSet<User>("UserId");
            UserPermissions = new FakeDbSet<UserPermission>("UserPermissionId");
            UserPreferences = new FakeDbSet<UserPreference>("UserPreferenceId");
            UserRoles = new FakeDbSet<UserRole>("UserRoleId");
            VersionInfoes = new FakeDbSet<VersionInfo>("Version");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Alerts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Alert
    {
        public int IAlertId { get; set; } // iAlertId (Primary key)
        public System.DateTime DtCreated { get; set; } // dtCreated
        public System.DateTime? DtSent { get; set; } // dtSent
        public System.DateTime? DtDeleted { get; set; } // dtDeleted
        public int? IUserId { get; set; } // iUserId
        public string SMessage { get; set; } // sMessage (length: 500)
        public string STitle { get; set; } // sTitle (length: 100)
        public int IAlertSettingId { get; set; } // iAlertSettingId

        // Foreign keys

        /// <summary>
        /// Parent AlertSetting pointed by [Alerts].([IAlertSettingId]) (FK_Alerts_AlertSettings)
        /// </summary>
        public virtual AlertSetting AlertSetting { get; set; } // FK_Alerts_AlertSettings

        /// <summary>
        /// Parent User pointed by [Alerts].([IUserId]) (FK_Alerts_Users)
        /// </summary>
        public virtual User User { get; set; } // FK_Alerts_Users

        public Alert()
        {
            DtCreated = System.DateTime.Now;
        }
    }

    // AlertSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AlertSetting
    {
        public int IAlertSettingId { get; set; } // iAlertSettingId (Primary key)
        public int? AlertTypeId { get; set; } // AlertTypeId
        public int? IExchangeId { get; set; } // iExchangeId
        public decimal? PriceLow { get; set; } // PriceLow
        public decimal? PriceHigh { get; set; } // PriceHigh
        public System.DateTime? DtCreated { get; set; } // dtCreated
        public System.DateTime? DtDeleted { get; set; } // dtDeleted
        public int? IUserId { get; set; } // iUserId
        public string STitle { get; set; } // sTitle (length: 100)
        public int? ICurrencyPairId { get; set; } // iCurrencyPairID
        public bool BActive { get; set; } // bActive

        // Reverse navigation

        /// <summary>
        /// Child Alerts where [Alerts].[iAlertSettingId] point to this entity (FK_Alerts_AlertSettings)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Alert> Alerts { get; set; } // Alerts.FK_Alerts_AlertSettings

        // Foreign keys

        /// <summary>
        /// Parent CurrencyPair pointed by [AlertSettings].([ICurrencyPairId]) (FK_AlertSettings_CurrencyPairs)
        /// </summary>
        public virtual CurrencyPair CurrencyPair { get; set; } // FK_AlertSettings_CurrencyPairs

        /// <summary>
        /// Parent Exchanx pointed by [AlertSettings].([IExchangeId]) (FK_AlertSettings_Exchanges)
        /// </summary>
        public virtual Exchanx Exchanx { get; set; } // FK_AlertSettings_Exchanges

        /// <summary>
        /// Parent User pointed by [AlertSettings].([IUserId]) (FK_AlertSettings_Users)
        /// </summary>
        public virtual User User { get; set; } // FK_AlertSettings_Users

        public AlertSetting()
        {
            DtCreated = System.DateTime.Now;
            BActive = true;
            Alerts = new System.Collections.Generic.List<Alert>();
        }
    }

    // CurrencyPairs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class CurrencyPair
    {
        public int ICurrencyPairId { get; set; } // iCurrencyPairId (Primary key)
        public string SName { get; set; } // sName (length: 50)
        public string SDescription { get; set; } // sDescription (length: 100)
        public System.DateTime DtCreated { get; set; } // dtCreated
        public System.DateTime? DtDeleted { get; set; } // dtDeleted

        // Reverse navigation

        /// <summary>
        /// Child AlertSettings where [AlertSettings].[iCurrencyPairID] point to this entity (FK_AlertSettings_CurrencyPairs)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AlertSetting> AlertSettings { get; set; } // AlertSettings.FK_AlertSettings_CurrencyPairs

        public CurrencyPair()
        {
            DtCreated = System.DateTime.Now;
            AlertSettings = new System.Collections.Generic.List<AlertSetting>();
        }
    }

    // Exceptions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Exception
    {
        public long Id { get; set; } // Id (Primary key)
        public System.Guid Guid { get; set; } // GUID
        public string ApplicationName { get; set; } // ApplicationName (length: 50)
        public string MachineName { get; set; } // MachineName (length: 50)
        public System.DateTime CreationDate { get; set; } // CreationDate
        public string Type { get; set; } // Type (length: 100)
        public bool IsProtected { get; set; } // IsProtected
        public string Host { get; set; } // Host (length: 100)
        public string Url { get; set; } // Url (length: 500)
        public string HttpMethod { get; set; } // HTTPMethod (length: 10)
        public string IpAddress { get; set; } // IPAddress (length: 40)
        public string Source { get; set; } // Source (length: 100)
        public string Message { get; set; } // Message (length: 1000)
        public string Detail { get; set; } // Detail
        public int? StatusCode { get; set; } // StatusCode
        public string Sql { get; set; } // SQL
        public System.DateTime? DeletionDate { get; set; } // DeletionDate
        public string FullJson { get; set; } // FullJson
        public int? ErrorHash { get; set; } // ErrorHash
        public int DuplicateCount { get; set; } // DuplicateCount

        public Exception()
        {
            IsProtected = true;
            DuplicateCount = 1;
        }
    }

    // Exchanges
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Exchanx
    {
        public int IExchangeId { get; set; } // iExchangeId (Primary key)
        public string SName { get; set; } // sName (length: 50)
        public System.DateTime DtCreated { get; set; } // dtCreated
        public System.DateTime? DtDeleted { get; set; } // dtDeleted

        // Reverse navigation

        /// <summary>
        /// Child AlertSettings where [AlertSettings].[iExchangeId] point to this entity (FK_AlertSettings_Exchanges)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AlertSetting> AlertSettings { get; set; } // AlertSettings.FK_AlertSettings_Exchanges

        public Exchanx()
        {
            DtCreated = System.DateTime.Now;
            AlertSettings = new System.Collections.Generic.List<AlertSetting>();
        }
    }

    // Languages
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Language
    {
        public int Id { get; set; } // Id (Primary key)
        public string LanguageId { get; set; } // LanguageId (length: 10)
        public string LanguageName { get; set; } // LanguageName (length: 50)
    }

    // Roles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Role
    {
        public int RoleId { get; set; } // RoleId (Primary key)
        public string RoleName { get; set; } // RoleName (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child RolePermissions where [RolePermissions].[RoleId] point to this entity (FK_RolePermissions_RoleId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<RolePermission> RolePermissions { get; set; } // RolePermissions.FK_RolePermissions_RoleId
        /// <summary>
        /// Child UserRoles where [UserRoles].[RoleId] point to this entity (FK_UserRoles_RoleId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<UserRole> UserRoles { get; set; } // UserRoles.FK_UserRoles_RoleId

        public Role()
        {
            RolePermissions = new System.Collections.Generic.List<RolePermission>();
            UserRoles = new System.Collections.Generic.List<UserRole>();
        }
    }

    // RolePermissions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class RolePermission
    {
        public long RolePermissionId { get; set; } // RolePermissionId (Primary key)
        public int RoleId { get; set; } // RoleId
        public string PermissionKey { get; set; } // PermissionKey (length: 100)

        // Foreign keys

        /// <summary>
        /// Parent Role pointed by [RolePermissions].([RoleId]) (FK_RolePermissions_RoleId)
        /// </summary>
        public virtual Role Role { get; set; } // FK_RolePermissions_RoleId
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class User
    {
        public int UserId { get; set; } // UserId (Primary key)
        public string Username { get; set; } // Username (length: 100)
        public string DisplayName { get; set; } // DisplayName (length: 100)
        public string Email { get; set; } // Email (length: 100)
        public string Source { get; set; } // Source (length: 4)
        public string PasswordHash { get; set; } // PasswordHash (length: 86)
        public string PasswordSalt { get; set; } // PasswordSalt (length: 10)
        public System.DateTime? LastDirectoryUpdate { get; set; } // LastDirectoryUpdate
        public string UserImage { get; set; } // UserImage (length: 100)
        public System.DateTime InsertDate { get; set; } // InsertDate
        public int InsertUserId { get; set; } // InsertUserId
        public System.DateTime? UpdateDate { get; set; } // UpdateDate
        public int? UpdateUserId { get; set; } // UpdateUserId
        public short IsActive { get; set; } // IsActive

        // Reverse navigation

        /// <summary>
        /// Child Alerts where [Alerts].[iUserId] point to this entity (FK_Alerts_Users)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Alert> Alerts { get; set; } // Alerts.FK_Alerts_Users
        /// <summary>
        /// Child AlertSettings where [AlertSettings].[iUserId] point to this entity (FK_AlertSettings_Users)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<AlertSetting> AlertSettings { get; set; } // AlertSettings.FK_AlertSettings_Users
        /// <summary>
        /// Child UserPermissions where [UserPermissions].[UserId] point to this entity (FK_UserPermissions_UserId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<UserPermission> UserPermissions { get; set; } // UserPermissions.FK_UserPermissions_UserId
        /// <summary>
        /// Child UserRoles where [UserRoles].[UserId] point to this entity (FK_UserRoles_UserId)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<UserRole> UserRoles { get; set; } // UserRoles.FK_UserRoles_UserId

        public User()
        {
            IsActive = 1;
            UserPermissions = new System.Collections.Generic.List<UserPermission>();
            UserRoles = new System.Collections.Generic.List<UserRole>();
            Alerts = new System.Collections.Generic.List<Alert>();
            AlertSettings = new System.Collections.Generic.List<AlertSetting>();
        }
    }

    // UserPermissions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserPermission
    {
        public long UserPermissionId { get; set; } // UserPermissionId (Primary key)
        public int UserId { get; set; } // UserId
        public string PermissionKey { get; set; } // PermissionKey (length: 100)
        public bool Granted { get; set; } // Granted

        // Foreign keys

        /// <summary>
        /// Parent User pointed by [UserPermissions].([UserId]) (FK_UserPermissions_UserId)
        /// </summary>
        public virtual User User { get; set; } // FK_UserPermissions_UserId

        public UserPermission()
        {
            Granted = true;
        }
    }

    // UserPreferences
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserPreference
    {
        public int UserPreferenceId { get; set; } // UserPreferenceId (Primary key)
        public long UserId { get; set; } // UserId
        public string PreferenceType { get; set; } // PreferenceType (length: 100)
        public string Name { get; set; } // Name (length: 200)
        public string Value { get; set; } // Value
    }

    // UserRoles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserRole
    {
        public long UserRoleId { get; set; } // UserRoleId (Primary key)
        public int UserId { get; set; } // UserId
        public int RoleId { get; set; } // RoleId

        // Foreign keys

        /// <summary>
        /// Parent Role pointed by [UserRoles].([RoleId]) (FK_UserRoles_RoleId)
        /// </summary>
        public virtual Role Role { get; set; } // FK_UserRoles_RoleId

        /// <summary>
        /// Parent User pointed by [UserRoles].([UserId]) (FK_UserRoles_UserId)
        /// </summary>
        public virtual User User { get; set; } // FK_UserRoles_UserId
    }

    // VersionInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class VersionInfo
    {
        public long Version { get; set; } // Version (Primary key via unique index UC_Version)
        public System.DateTime? AppliedOn { get; set; } // AppliedOn
        public string Description { get; set; } // Description (length: 1024)
    }

    #endregion

    #region POCO Configuration

    // Alerts
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AlertConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Alert>
    {
        public AlertConfiguration()
            : this("dbo")
        {
        }

        public AlertConfiguration(string schema)
        {
            ToTable("Alerts", schema);
            HasKey(x => x.IAlertId);

            Property(x => x.IAlertId).HasColumnName(@"iAlertId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DtCreated).HasColumnName(@"dtCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DtSent).HasColumnName(@"dtSent").HasColumnType("datetime").IsOptional();
            Property(x => x.DtDeleted).HasColumnName(@"dtDeleted").HasColumnType("datetime").IsOptional();
            Property(x => x.IUserId).HasColumnName(@"iUserId").HasColumnType("int").IsOptional();
            Property(x => x.SMessage).HasColumnName(@"sMessage").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.STitle).HasColumnName(@"sTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.IAlertSettingId).HasColumnName(@"iAlertSettingId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasOptional(a => a.User).WithMany(b => b.Alerts).HasForeignKey(c => c.IUserId).WillCascadeOnDelete(false); // FK_Alerts_Users
            HasRequired(a => a.AlertSetting).WithMany(b => b.Alerts).HasForeignKey(c => c.IAlertSettingId).WillCascadeOnDelete(false); // FK_Alerts_AlertSettings
        }
    }

    // AlertSettings
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AlertSettingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AlertSetting>
    {
        public AlertSettingConfiguration()
            : this("dbo")
        {
        }

        public AlertSettingConfiguration(string schema)
        {
            ToTable("AlertSettings", schema);
            HasKey(x => x.IAlertSettingId);

            Property(x => x.IAlertSettingId).HasColumnName(@"iAlertSettingId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.AlertTypeId).HasColumnName(@"AlertTypeId").HasColumnType("int").IsOptional();
            Property(x => x.IExchangeId).HasColumnName(@"iExchangeId").HasColumnType("int").IsOptional();
            Property(x => x.PriceLow).HasColumnName(@"PriceLow").HasColumnType("decimal").IsOptional().HasPrecision(18,0);
            Property(x => x.PriceHigh).HasColumnName(@"PriceHigh").HasColumnType("decimal").IsOptional().HasPrecision(18,0);
            Property(x => x.DtCreated).HasColumnName(@"dtCreated").HasColumnType("datetime").IsOptional();
            Property(x => x.DtDeleted).HasColumnName(@"dtDeleted").HasColumnType("datetime").IsOptional();
            Property(x => x.IUserId).HasColumnName(@"iUserId").HasColumnType("int").IsOptional();
            Property(x => x.STitle).HasColumnName(@"sTitle").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.ICurrencyPairId).HasColumnName(@"iCurrencyPairID").HasColumnType("int").IsOptional();
            Property(x => x.BActive).HasColumnName(@"bActive").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasOptional(a => a.CurrencyPair).WithMany(b => b.AlertSettings).HasForeignKey(c => c.ICurrencyPairId).WillCascadeOnDelete(false); // FK_AlertSettings_CurrencyPairs
            HasOptional(a => a.Exchanx).WithMany(b => b.AlertSettings).HasForeignKey(c => c.IExchangeId).WillCascadeOnDelete(false); // FK_AlertSettings_Exchanges
            HasOptional(a => a.User).WithMany(b => b.AlertSettings).HasForeignKey(c => c.IUserId).WillCascadeOnDelete(false); // FK_AlertSettings_Users
        }
    }

    // CurrencyPairs
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class CurrencyPairConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CurrencyPair>
    {
        public CurrencyPairConfiguration()
            : this("dbo")
        {
        }

        public CurrencyPairConfiguration(string schema)
        {
            ToTable("CurrencyPairs", schema);
            HasKey(x => x.ICurrencyPairId);

            Property(x => x.ICurrencyPairId).HasColumnName(@"iCurrencyPairId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SName).HasColumnName(@"sName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.SDescription).HasColumnName(@"sDescription").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.DtCreated).HasColumnName(@"dtCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DtDeleted).HasColumnName(@"dtDeleted").HasColumnType("datetime").IsOptional();
        }
    }

    // Exceptions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class ExceptionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Exception>
    {
        public ExceptionConfiguration()
            : this("dbo")
        {
        }

        public ExceptionConfiguration(string schema)
        {
            ToTable("Exceptions", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Guid).HasColumnName(@"GUID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ApplicationName).HasColumnName(@"ApplicationName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.MachineName).HasColumnName(@"MachineName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Type).HasColumnName(@"Type").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.IsProtected).HasColumnName(@"IsProtected").HasColumnType("bit").IsRequired();
            Property(x => x.Host).HasColumnName(@"Host").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("nvarchar").IsOptional().HasMaxLength(500);
            Property(x => x.HttpMethod).HasColumnName(@"HTTPMethod").HasColumnType("nvarchar").IsOptional().HasMaxLength(10);
            Property(x => x.IpAddress).HasColumnName(@"IPAddress").HasColumnType("nvarchar").IsOptional().HasMaxLength(40);
            Property(x => x.Source).HasColumnName(@"Source").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.Detail).HasColumnName(@"Detail").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.StatusCode).HasColumnName(@"StatusCode").HasColumnType("int").IsOptional();
            Property(x => x.Sql).HasColumnName(@"SQL").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.DeletionDate).HasColumnName(@"DeletionDate").HasColumnType("datetime").IsOptional();
            Property(x => x.FullJson).HasColumnName(@"FullJson").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ErrorHash).HasColumnName(@"ErrorHash").HasColumnType("int").IsOptional();
            Property(x => x.DuplicateCount).HasColumnName(@"DuplicateCount").HasColumnType("int").IsRequired();
        }
    }

    // Exchanges
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class ExchanxConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Exchanx>
    {
        public ExchanxConfiguration()
            : this("dbo")
        {
        }

        public ExchanxConfiguration(string schema)
        {
            ToTable("Exchanges", schema);
            HasKey(x => x.IExchangeId);

            Property(x => x.IExchangeId).HasColumnName(@"iExchangeId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SName).HasColumnName(@"sName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.DtCreated).HasColumnName(@"dtCreated").HasColumnType("datetime").IsRequired();
            Property(x => x.DtDeleted).HasColumnName(@"dtDeleted").HasColumnType("datetime").IsOptional();
        }
    }

    // Languages
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class LanguageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Language>
    {
        public LanguageConfiguration()
            : this("dbo")
        {
        }

        public LanguageConfiguration(string schema)
        {
            ToTable("Languages", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.LanguageId).HasColumnName(@"LanguageId").HasColumnType("nvarchar").IsRequired().HasMaxLength(10);
            Property(x => x.LanguageName).HasColumnName(@"LanguageName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
        }
    }

    // Roles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class RoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Role>
    {
        public RoleConfiguration()
            : this("dbo")
        {
        }

        public RoleConfiguration(string schema)
        {
            ToTable("Roles", schema);
            HasKey(x => x.RoleId);

            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleName).HasColumnName(@"RoleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
        }
    }

    // RolePermissions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class RolePermissionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RolePermission>
    {
        public RolePermissionConfiguration()
            : this("dbo")
        {
        }

        public RolePermissionConfiguration(string schema)
        {
            ToTable("RolePermissions", schema);
            HasKey(x => x.RolePermissionId);

            Property(x => x.RolePermissionId).HasColumnName(@"RolePermissionId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();
            Property(x => x.PermissionKey).HasColumnName(@"PermissionKey").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);

            // Foreign keys
            HasRequired(a => a.Role).WithMany(b => b.RolePermissions).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_RolePermissions_RoleId
        }
    }

    // Users
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("Users", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Source).HasColumnName(@"Source").HasColumnType("nvarchar").IsRequired().HasMaxLength(4);
            Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("nvarchar").IsRequired().HasMaxLength(86);
            Property(x => x.PasswordSalt).HasColumnName(@"PasswordSalt").HasColumnType("nvarchar").IsRequired().HasMaxLength(10);
            Property(x => x.LastDirectoryUpdate).HasColumnName(@"LastDirectoryUpdate").HasColumnType("datetime").IsOptional();
            Property(x => x.UserImage).HasColumnName(@"UserImage").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.InsertDate).HasColumnName(@"InsertDate").HasColumnType("datetime").IsRequired();
            Property(x => x.InsertUserId).HasColumnName(@"InsertUserId").HasColumnType("int").IsRequired();
            Property(x => x.UpdateDate).HasColumnName(@"UpdateDate").HasColumnType("datetime").IsOptional();
            Property(x => x.UpdateUserId).HasColumnName(@"UpdateUserId").HasColumnType("int").IsOptional();
            Property(x => x.IsActive).HasColumnName(@"IsActive").HasColumnType("smallint").IsRequired();
        }
    }

    // UserPermissions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserPermissionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserPermission>
    {
        public UserPermissionConfiguration()
            : this("dbo")
        {
        }

        public UserPermissionConfiguration(string schema)
        {
            ToTable("UserPermissions", schema);
            HasKey(x => x.UserPermissionId);

            Property(x => x.UserPermissionId).HasColumnName(@"UserPermissionId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.PermissionKey).HasColumnName(@"PermissionKey").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Granted).HasColumnName(@"Granted").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.User).WithMany(b => b.UserPermissions).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_UserPermissions_UserId
        }
    }

    // UserPreferences
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserPreferenceConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserPreference>
    {
        public UserPreferenceConfiguration()
            : this("dbo")
        {
        }

        public UserPreferenceConfiguration(string schema)
        {
            ToTable("UserPreferences", schema);
            HasKey(x => x.UserPreferenceId);

            Property(x => x.UserPreferenceId).HasColumnName(@"UserPreferenceId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("bigint").IsRequired();
            Property(x => x.PreferenceType).HasColumnName(@"PreferenceType").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.Value).HasColumnName(@"Value").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // UserRoles
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserRoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserRole>
    {
        public UserRoleConfiguration()
            : this("dbo")
        {
        }

        public UserRoleConfiguration(string schema)
        {
            ToTable("UserRoles", schema);
            HasKey(x => x.UserRoleId);

            Property(x => x.UserRoleId).HasColumnName(@"UserRoleId").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired();
            Property(x => x.RoleId).HasColumnName(@"RoleId").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Role).WithMany(b => b.UserRoles).HasForeignKey(c => c.RoleId).WillCascadeOnDelete(false); // FK_UserRoles_RoleId
            HasRequired(a => a.User).WithMany(b => b.UserRoles).HasForeignKey(c => c.UserId).WillCascadeOnDelete(false); // FK_UserRoles_UserId
        }
    }

    // VersionInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class VersionInfoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VersionInfo>
    {
        public VersionInfoConfiguration()
            : this("dbo")
        {
        }

        public VersionInfoConfiguration(string schema)
        {
            ToTable("VersionInfo", schema);
            HasKey(x => x.Version);

            Property(x => x.Version).HasColumnName(@"Version").HasColumnType("bigint").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AppliedOn).HasColumnName(@"AppliedOn").HasColumnType("datetime").IsOptional();
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1024);
        }
    }

    #endregion

}
// </auto-generated>

